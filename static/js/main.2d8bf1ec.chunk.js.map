{"version":3,"sources":["man.svg","logo.svg","Greetings.js","components/Resume.js","components/Home.js","components/DemoHooks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","Resume","props","info","data","profile","location","data1","id","className","details","name","co","Home","card_details","console","log","map","values","index","key","src","icon","alt","style","width","role","href","mobile","email","to","pathname","DemoHooks","useState","count","setCount","onClick","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,iC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,0JCEJC,Y,mCCCxB,SAASC,EAAOC,GAC7B,IAAIC,EAAOC,EAAKC,QAAQH,EAAMI,SAASC,MAAMC,IAE7C,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,4BAAKN,EAAKO,QAAQC,SAIxB,yBAAKF,UAAU,gBACb,8CACA,6BACA,2BAAIN,EAAKS,M,WCmBFC,EA/BJ,WACT,IAAIC,EAAeV,EAAKC,QAExB,OADAU,QAAQC,IAAIF,GAEV,yBAAKL,UAAU,8BACZK,EAAaG,KAAI,SAACC,EAAQC,GAAT,OAChB,6BAASV,UAAU,mCAAmCW,IAAKD,GACzD,yBAAKV,UAAU,oBACb,6BAASA,UAAU,aACjB,yBAAKY,IAAKC,IAAMC,IAAI,gBAAgBC,MAAO,CAAEC,MAAO,SACpD,4BAAKP,EAAOR,QAAQC,MACpB,wBAAIF,UAAU,kBAAkBS,EAAOR,QAAQgB,MAC/C,uBAAGC,KAAM,OAAST,EAAOR,QAAQkB,QAC/B,4BAAKV,EAAOR,QAAQkB,SAEtB,uBAAGD,KAAM,UAAYT,EAAOR,QAAQmB,OAClC,4BAAKX,EAAOR,QAAQmB,QAEtB,kBAAC,IAAD,CACEC,GAAI,CAAEC,SAAU,UAAWxB,MAAO,CAAEC,GAAIW,IACxCV,UAAU,mBAFZ,wB,OCXCuB,MAXf,WAAsB,IAAD,EACKC,mBAAS,GADd,mBACdC,EADc,KACPC,EADO,KAEnB,OACE,6BACE,2CACA,4BAAKD,GACL,4BAAQE,QAAS,kBAAMD,EAASD,EAAQ,KAAxC,eCyBSG,MAtBf,WACE,OACE,yBAAK5B,UAAU,OAab,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,mBAAmBC,UAAW3B,IAChD,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,UAAUC,UAAWvC,IACvC,kBAAC,EAAD,QChBcwC,QACW,cAA7BC,OAAOpC,SAASqC,UAEe,UAA7BD,OAAOpC,SAASqC,UAEhBD,OAAOpC,SAASqC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.2d8bf1ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/man.2369d24d.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nexport default class Greetings extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            name:0\r\n        }\r\n    }\r\n\r\n    Increase= () =>{\r\n        this.setState({\r\n            name : this.state.name+1\r\n        })\r\n    }\r\n    Decrease= () =>{\r\n        this.setState({\r\n            name : this.state.name-1\r\n        })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ this.state.name } </h1>\r\n                <button onClick= { this.Increase }>Increase</button>\r\n                <button onClick= { this.Decrease }>Decrease</button>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport data from \"../data/data.json\";\r\n\r\nexport default function Resume(props) {\r\n  let info = data.profile[props.location.data1.id];\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-lg-3 m-2\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h1>{info.details.name}</h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-lg-8 m-2\">\r\n        <h2>Career Object:</h2>\r\n        <hr />\r\n        <p>{info.co}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport data from \"../data/data.json\";\r\nimport icon from \"../man.svg\";\r\nimport Resume from \"./Resume\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nlet Home = () => {\r\n  let card_details = data.profile;\r\n  console.log(card_details);\r\n  return (\r\n    <div className=\"row justify-content-center\">\r\n      {card_details.map((values, index) => (\r\n        <section className=\"col-lg-4 col-md-4 col-sm-10 mt-2\" key={index}>\r\n          <div className=\"card text-center\">\r\n            <article className=\"card-body\">\r\n              <img src={icon} alt=\"profile image\" style={{ width: \"50%\" }} />\r\n              <h1>{values.details.name}</h1>\r\n              <h3 className=\"text-secondary\">{values.details.role}</h3>\r\n              <a href={\"tel:\" + values.details.mobile}>\r\n                <h4>{values.details.mobile}</h4>\r\n              </a>\r\n              <a href={\"mailto:\" + values.details.email}>\r\n                <h4>{values.details.email}</h4>\r\n              </a>\r\n              <Link\r\n                to={{ pathname: \"/resume\", data1: { id: index } }}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                View Profile\r\n              </Link>\r\n            </article>\r\n          </div>\r\n        </section>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction DemoHooks() {\r\n  let [count, setCount] = useState(0);\r\n  return (\r\n    <div>\r\n      <h1> It's Hooks</h1>\r\n      <h2>{count}</h2>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DemoHooks;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Welcome from \"./Welcome\";\nimport Greet from \"./Greetings\";\nimport Sample from \"./SampleHook\";\nimport Home from \"./components/Home\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Resume from \"./components/Resume\";\nimport DemoHook from \"./components/DemoHooks\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Welcome name=\"Rajesh\">\n        <h3>Hello Rajesh How are you</h3>\n      </Welcome>\n      <Welcome name=\"Surya\">\n        <h3>Hello Surya How are you</h3>\n      </Welcome>\n      <Welcome name=\"SaiRam\">\n        <h3>Hello SaiRam How are you</h3>\n      </Welcome> */}\n      {/* <Greet></Greet>\n      <Sample></Sample> */}\n\n      <Route exact path=\"/react-afternoon\" component={Home} />\n      <Route exact path=\"/resume\" component={Resume} />\n      <DemoHook />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}